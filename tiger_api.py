import os
import aiohttp
import asyncio
import json
import aiofiles
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Optional, Tuple

from dotenv import load_dotenv
load_dotenv()
API_KEY = os.getenv("API_KEY")

ANIMALS_API_URL = "https://api.api-ninjas.com/v1/animals"
FACTS_API_URL = "https://api.api-ninjas.com/v1/facts"
ANIMAL_PARAMS = {"name": "tiger", "limit": 15}

REAL_TIGERS_DB = {
    "–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π —Ç–∏–≥—Ä": {
        "conservation": "–ü–æ–¥ —É–≥—Ä–æ–∑–æ–π (Endangered)",
        "fact": "–°–∞–º—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–æ–¥–≤–∏–¥ —Ç–∏–≥—Ä–∞.",
        "weight": "180-258 –∫–≥",
        "habitat": "–ò–Ω–¥–∏—è, –ë–∞–Ω–≥–ª–∞–¥–µ—à, –ù–µ–ø–∞–ª, –ë—É—Ç–∞–Ω",
        "family": "–ö–æ—à–∞—á—å–∏",
        "unique": "–ú–æ–≥—É—Ç —Å—ä–µ—Å—Ç—å –¥–æ 40 –∫–≥ –º—è—Å–∞ –∑–∞ –æ–¥–∏–Ω –ø—Ä–∏—ë–º!"
    },
    "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä": {
        "conservation": "–í—ã–º–∏—Ä–∞—é—â–∏–π (Endangered)",
        "fact": "–°–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π –ø–æ–¥–≤–∏–¥ —Ç–∏–≥—Ä–∞.",
        "weight": "180-306 –∫–≥", 
        "habitat": "–†–æ—Å—Å–∏—è, –ö–∏—Ç–∞–π",
        "family": "–ö–æ—à–∞—á—å–∏",
        "unique": "–í—ã–¥–µ—Ä–∂–∏–≤–∞—é—Ç –º–æ—Ä–æ–∑—ã –¥–æ -45¬∞C!"
    },
    "–ò–Ω–¥–æ–∫–∏—Ç–∞–π—Å–∫–∏–π —Ç–∏–≥—Ä": {
        "conservation": "–ù–∞ –≥—Ä–∞–Ω–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è (Critically Endangered)",
        "fact": "–ò–º–µ–µ—Ç –±–æ–ª–µ–µ —Ç—ë–º–Ω—ã–π –æ–∫—Ä–∞—Å, —á–µ–º –±–µ–Ω–≥–∞–ª—å—Å–∫–∏–π —Ç–∏–≥—Ä.",
        "weight": "150-195 –∫–≥",
        "habitat": "–¢–∞–∏–ª–∞–Ω–¥, –ú—å—è–Ω–º–∞, –õ–∞–æ—Å, –í—å–µ—Ç–Ω–∞–º, –ö–∞–º–±–æ–¥–∂–∞",
        "family": "–ö–æ—à–∞—á—å–∏",
        "unique": "–ü–æ–ª–æ—Å—ã —É–∂–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —á–∞—â–µ, —á–µ–º —É –¥—Ä—É–≥–∏—Ö –ø–æ–¥–≤–∏–¥–æ–≤"
    },
    "–ú–∞–ª–∞–π—Å–∫–∏–π —Ç–∏–≥—Ä": {
        "conservation": "–ù–∞ –≥—Ä–∞–Ω–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è (Critically Endangered)",
        "fact": "–°–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ–¥–≤–∏–¥ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∫–æ–≤–æ–π –ê–∑–∏–∏.",
        "weight": "100-130 –∫–≥",
        "habitat": "–ú–∞–ª–∞–π–∑–∏—è, —é–≥ –¢–∞–∏–ª–∞–Ω–¥–∞",
        "family": "–ö–æ—à–∞—á—å–∏",
        "unique": "–ü—Ä–∏–∑–Ω–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–¥–≤–∏–¥–æ–º —Ç–æ–ª—å–∫–æ –≤ 2004 –≥–æ–¥—É!"
    },
    "–°—É–º–∞—Ç—Ä–∞–Ω—Å–∫–∏–π —Ç–∏–≥—Ä": {
        "conservation": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É–≥—Ä–æ–∑–∞ (Critically Endangered)",
        "fact": "–°–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π –∏–∑ –Ω—ã–Ω–µ –∂–∏–≤—É—â–∏—Ö –ø–æ–¥–≤–∏–¥–æ–≤.",
        "weight": "75-140 –∫–≥",
        "habitat": "–û—Å—Ç—Ä–æ–≤ –°—É–º–∞—Ç—Ä–∞",
        "family": "–ö–æ—à–∞—á—å–∏",
        "unique": "–ò–º–µ–µ—Ç —Å–∞–º—ã–µ —Ç—ë–º–Ω—ã–µ –ø–æ–ª–æ—Å—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ç–∏–≥—Ä–æ–≤!"
    },
    "–Æ–∂–Ω–æ–∫–∏—Ç–∞–π—Å–∫–∏–π —Ç–∏–≥—Ä": {
        "conservation": "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—ã–º–µ—Ä—à–∏–π (Possibly Extinct in Wild)",
        "fact": "–í–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –≤—ã–º–µ—Ä –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ.",
        "weight": "130-175 –∫–≥",
        "habitat": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ - –Æ–∂–Ω—ã–π –ö–∏—Ç–∞–π",
        "family": "–ö–æ—à–∞—á—å–∏",
        "unique": "–í –Ω–µ–≤–æ–ª–µ –æ—Å—Ç–∞–ª–æ—Å—å –æ–∫–æ–ª–æ 100 –æ—Å–æ–±–µ–π"
    },
    "–ë–µ–ª—ã–π —Ç–∏–≥—Ä": {
        "conservation": "–ù–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ",
        "fact": "–¶–≤–µ—Ç–æ–≤–∞—è –º—É—Ç–∞—Ü–∏—è –±–µ–Ω–≥–∞–ª—å—Å–∫–æ–≥–æ —Ç–∏–≥—Ä–∞.",
        "weight": "200-230 –∫–≥",
        "habitat": "–¢–æ–ª—å–∫–æ –≤ –∑–æ–æ–ø–∞—Ä–∫–∞—Ö",
        "family": "–ö–æ—à–∞—á—å–∏",
        "unique": "–í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è 1 –Ω–∞ 10,000 –æ—Å–æ–±–µ–π"
    }
}

RUSSIAN_TIGER_FACTS = [
    "–¢–∏–≥—Ä—ã - —Å–∞–º—ã–µ –∫—Ä—É–ø–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ —Å–µ–º–µ–π—Å—Ç–≤–∞ –∫–æ—à–∞—á—å–∏—Ö.",
    "–ü–æ–ª–æ—Å—ã –∫–∞–∂–¥–æ–≥–æ —Ç–∏–≥—Ä–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã, –∫–∞–∫ –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤ —É —á–µ–ª–æ–≤–µ–∫–∞.",
    "–¢–∏–≥—Ä –º–æ–∂–µ—Ç –ø—Ä—ã–≥–Ω—É—Ç—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ 6 –º–µ—Ç—Ä–æ–≤.",
    "–¢–∏–≥—Ä–∏–Ω—ã–π —Ä—ã–∫ —Å–ª—ã—à–Ω–æ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –¥–æ 3 –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤.",
    "–¢–∏–≥—Ä—ã –æ—Ç–ª–∏—á–Ω—ã–µ –ø–ª–æ–≤—Ü—ã –∏ –ª—é–±—è—Ç –≤–æ–¥—É.",
    "–¢–∏–≥—Ä—è—Ç–∞ —Ä–æ–∂–¥–∞—é—Ç—Å—è —Å–ª–µ–ø—ã–º–∏ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–∏—Å—è—Ç –æ—Ç –º–∞—Ç–µ—Ä–∏.",
    "–¢–∏–≥—Ä—ã –æ–±—ã—á–Ω–æ –∏–∑–±–µ–≥–∞—é—Ç –ª—é–¥–µ–π –∏ —Ä–µ–¥–∫–æ –Ω–∞–ø–∞–¥–∞—é—Ç –ø–µ—Ä–≤—ã–º–∏.",
    "–í –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ —Ç–∏–≥—Ä—ã –∂–∏–≤—É—Ç 10-15 –ª–µ—Ç.",
    "–¢–∏–≥—Ä—ã –º–µ—Ç—è—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –º–æ—á–æ–π –∏ —Ü–∞—Ä–∞–ø–∏–Ω–∞–º–∏ –Ω–∞ –¥–µ—Ä–µ–≤—å—è—Ö.",
    "–¢–∏–≥—Ä–∏—Ü—ã –≤—ã–Ω–∞—à–∏–≤–∞—é—Ç –¥–µ—Ç—ë–Ω—ã—à–µ–π –æ–∫–æ–ª–æ 3-4 –º–µ—Å—è—Ü–µ–≤."
]

NAME_TRANSLATION = {
    "Bengal Tiger": "–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π —Ç–∏–≥—Ä",
    "Siberian Tiger": "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä",
    "Indochinese Tiger": "–ò–Ω–¥–æ–∫–∏—Ç–∞–π—Å–∫–∏–π —Ç–∏–≥—Ä",
    "Malayan Tiger": "–ú–∞–ª–∞–π—Å–∫–∏–π —Ç–∏–≥—Ä",
    "Sumatran Tiger": "–°—É–º–∞—Ç—Ä–∞–Ω—Å–∫–∏–π —Ç–∏–≥—Ä",
    "South China Tiger": "–Æ–∂–Ω–æ–∫–∏—Ç–∞–π—Å–∫–∏–π —Ç–∏–≥—Ä",
    "White Tiger": "–ë–µ–ª—ã–π —Ç–∏–≥—Ä"
}

async def fetch_tiger_data(session: aiohttp.ClientSession) -> Tuple[List[Dict], List[str]]:
    try:
        async with session.get(
            ANIMALS_API_URL,
            headers={"X-Api-Key": API_KEY} if API_KEY else {},
            params=ANIMAL_PARAMS,
            timeout=aiohttp.ClientTimeout(10)
        ) as response:
            
            animals_data = []
            if response.status == 200:
                data = await response.json()
                animals_data = [
                    a for a in data 
                    if a.get("name") in NAME_TRANSLATION.keys()
                ]
            
        async with session.get(
            FACTS_API_URL,
            headers={"X-Api-Key": API_KEY} if API_KEY else {},
            params={"limit": 30},
            timeout=aiohttp.ClientTimeout(10)
        ) as response:
            
            facts = []
            if response.status == 200:
                data = await response.json()
                facts = [
                    f["fact"] for f in data 
                    if isinstance(f, dict) and 
                    "—Ç–∏–≥—Ä" in f.get("fact", "").lower()
                ][:5]
            
        return animals_data, facts if facts else RUSSIAN_TIGER_FACTS[:5]
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return [], RUSSIAN_TIGER_FACTS[:5]

async def enhance_tiger_data(raw_animals: List[Dict], facts: List[str]) -> List[Dict]:
    enhanced = []
    used_facts = set()
    
    for animal in raw_animals:
        name = animal.get("name")
        if name not in NAME_TRANSLATION:
            continue
            
        name_ru = NAME_TRANSLATION[name]
        info = REAL_TIGERS_DB.get(name_ru, {})
        
        enhanced.append({
            "name": name_ru,
            "conservation": info.get("conservation", 
                animal.get("characteristics", {}).get("conservation_status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")),
            "weight": info.get("weight", 
                animal.get("characteristics", {}).get("weight", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")),
            "habitat": info.get("habitat", 
                ", ".join(animal.get("locations", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"]))),
            "family": info.get("family", 
                animal.get("taxonomy", {}).get("family", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")),
            "fact": info.get("fact", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"),
            "unique": info.get("unique", "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"),
            "random_fact": next((f for f in facts if f not in used_facts), None)
        })
        
        if enhanced[-1]["random_fact"]:
            used_facts.add(enhanced[-1]["random_fact"])
    
    api_names = {a["name"] for a in enhanced}
    for name_ru, info in REAL_TIGERS_DB.items():
        if name_ru not in api_names:
            enhanced.append({
                "name": name_ru,
                **info,
                "random_fact": next((f for f in facts if f not in used_facts), None)
            })
            if enhanced[-1]["random_fact"]:
                used_facts.add(enhanced[-1]["random_fact"])
    
    return enhanced

async def save_and_display(data: List[Dict]):
    save_dir = Path("data")
    save_dir.mkdir(exist_ok=True)
    filepath = save_dir / f"tigers_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    async with aiofiles.open(filepath, "w", encoding="utf-8") as f:
        await f.write(json.dumps(data, ensure_ascii=False, indent=2, default=str))
    
    print(f"\n{' –û–¢–ß–ï–¢ –û –¢–ò–ì–†–ê–• ':=^60}")
    for tiger in data:
        print(f"\nüîπ {tiger['name']}")
        print(f"   üõ°Ô∏è –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {tiger['conservation']}")
        print(f"   ‚öñÔ∏è –í–µ—Å: {tiger['weight']}")
        print(f"   üåç –ê—Ä–µ–∞–ª –æ–±–∏—Ç–∞–Ω–∏—è: {tiger['habitat']}")
        print(f"   üß¨ –°–µ–º–µ–π—Å—Ç–≤–æ: {tiger['family']}")
        print(f"   üìå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç: {tiger['fact']}")
        if tiger.get('unique'):
            print(f"   üêæ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: {tiger['unique']}")
        if tiger.get('random_fact'):
            print(f"   üîç –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç: {tiger['random_fact']}")
    
    print(f"\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filepath}")

async def main():
    print("\nüü¢ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–≥—Ä–∞—Ö...")
    
    async with aiohttp.ClientSession() as session:
        raw_animals, facts = await fetch_tiger_data(session)
        enhanced_data = await enhance_tiger_data(raw_animals, facts)
        await save_and_display(enhanced_data)
    
    print("\nüî¥ –†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    if os.name == "nt":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())